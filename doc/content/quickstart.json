{"name":"快速上手","index":true,"content":[{"id":"firstProject","name":"创建 tui.js 工程","desc":"tui.js 是一个独立的 Javascript UI 框架，使用 tui.js 只要简单的下载开发包并加入你的 web 工程即可，tui.js 一开始就是为了纯静态页面而设计的，不需要后台服务器开发也可以工作的很好，当然如果需要后台数据交互的话，那么无论何种服务器开发语言都可创建支撑 tui.js 的后端服务器。","index":true,"content":[{"id":"createProjectManually","name":"手工创建web工程","desc":"请跟随如下步骤来创建一个web工程并包含对 tui.js 的引用。","index":true,"content":[{"id":"downloadSDK","name":"下载开发包","index":true,"desc":"在 tui.js 的项目主页下载开发用的分发包：\u003ca href=\"download/tui-release.zip\"\u003e下载\u003c/a\u003e\n\u003cbr\u003e\ntui.js依赖 font-awesome-4.2.0 和 jQuery-1.11.1，\n为了使用方便，压缩包中已经包括了这些资源，解压缩到您的web 工程中的 js 目录（可以根据自己需要随意命名）。"},{"id":"referJS","name":"引入脚本和CSS","index":true,"code":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n  \u003chead\u003e\n    \u003clink rel=\"stylesheet\" href=\"js/font-awesome-4.2.0/css/font-awesome.min.css\" type=\"text/css\" /\u003e\n    \u003clink rel=\"stylesheet\" href=\"js/tui/css/tui.min.css\" type=\"text/css\" /\u003e\n    \u003cscript src=\"js/jquery-1.11.1.min.js\"\u003e\u003c/script\u003e\n    \u003cscript src=\"js/tui/tui.all.min.js\"\u003e\u003c/script\u003e\n  \u003c/head\u003e\n  \u003cbody\u003e\n    ....\n  \u003c/body\u003e\n\u003c/html\u003e","desc":"在HEAD头中加入如下连接即可引用 tui.js，其中 font-awesome 和 jquery 是 tui.js 依赖的库，一个是流行的字体库，一个是著名的Javascript基础框架。如果您正在使用某种服务器端程序进行开发，那么可以把下面这几行代码放到一个公共的包含文件中，今后在所有用到 tui.js 的页面中进行包含就可以了。"}]},{"id":"createWebAPI","name":"创建 WebAPI 工程","desc":"如果您是 java web 开发人员，那么想要使用 tui.js，最简单的是使用 WebAPI 框架来进行开发，WebAPI 是一个开源的轻量级的 java 服务器开发框架，内置集成了 tui.js 作为前端 UI 库，它的设计理念就是希望使用静态 HTML + 服务器API 来代替传统的 asp，jsp, php 页面的开发方式，由于传统的开发方式把服务器代码和客户端代码都写在一起，无论是理解和维护都比较困难，随着客户端 javascript 的增强和 HTML5的进步，未来的开发方式会更多的采用静态页面+服务器API的方式进行开发，这种方式由于减轻了服务器生成动态页面的负担，也使得服务器并发能力得到增强。","index":true,"content":[{"id":"MavenCmd","name":"使用 Maven 创建 WebAPI 工程","desc":"WebAPI 使用 Maven 管理项目，并自带了 Maven 的原型工程模板，WebAPI 目前还处在开发阶段，暂时只有 SNAPSHOT 的版本，您首先需要下载并配置一个可用的 Maven。然后使用如下指令并根据提示来完成 WebAPI 工程的创建：","index":true,"code":"mvn archetype:generate \n  -DarchetypeCatalog=https://oss.sonatype.org/content/groups/public/\n  -DarchetypeGroupId=webapi-suit.thorqin.github.com\n  -DarchetypeArtifactId=webapi-archetype"},{"id":"devByWebAPI","name":"使用 WebAPI 框架进行开发","desc":"WebAPI 工程创建成功后，会生成默认的项目结构，其中 tui.js 位于 web 资源目录（src/main/webapp/assets/script）中，你可以在 webapp 目录中添加静态页面，也可以利用 WebAPI 提供的服务器包含页面（Server Side Include, .ssi, .shtml）来进行开发，SSI 页面默认位于 resources/ssi 目录中，.shtml 页面是最终会生成 html 的页面，而 .ssi 文件为碎片文件，只能被包含于别的文件中，在生成的原型工程中，默认提供了一个 common-include.ssi 文件，这个文件中已经包含了所有 tui.js 需要引用的项目，以后在其它页面中只要包含 common-include.ssi 这个文件就可以了。下面的代码演示了如何使用 SSI 包含：","code":"......\n\u003chead\u003e\n  \u003cmeta charset=\"utf-8\"\u003e\n  \u003ctitle\u003eDemo\u003c/title\u003e\n  \u003c%@include file=\"common-include.ssi\"%\u003e\n\u003c/head\u003e\n......","index":true},{"id":"helloWorldByWebapi","name":"WebAPI 版的 HelloWorld","desc":"使用 WebAPI 生成的原型工程实现了一个使用 tui.js 和后台代码进行交互显示当前时间的 HelloWorld 程序。其中前台代码中使用了 tui form 控件来向后台发起请求并解析返回内容，虽然代码不多，但是演示了前后台交互的基本方式，关于 WebAPI 的使用方法，会在后面的章节中陆续介绍一些，但是详细的情况请参考 WebAPI 的文档。","index":true}]}]}]}